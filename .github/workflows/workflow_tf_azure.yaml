name: TF_Azure_Function

on:
  push:
  # workflow will run only if below branches will be updated
    branches:
      - 'main'
      - 'dev'

env:
  TF_DIR: 'tf_azure'
  TF_DEV_ENV: 'DEV'
  TF_DEV_RESOURCE: 'dev'
  TF_PROD_ENV: 'PROD'
  AZURE_FUNC_APP_NAME: 'tf-dev-func-app'   # set this to your function app name on Azure
  AZURE_FUNC_APP_PATH: 'source'           # set this to the path to your function app project, defaults to the repository root
  PYTHON_VERSION: '3.9'                    # set this to the python version to use (e.g. '3.6', '3.7', '3.8')

# TO BE DEPLOYED
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Execute tests
#         run: exit 0
#   deploy:
#     runs-on: ubuntu-latest
#     needs: test
#     if: github.ref == 'refs/heads/master'
#     steps:
#       - name: Deploy app

jobs:
  terraform:
    name: 'Terraform'
    # refs/pull/<pr_number>/merge
    # refs/tags/<tag_name>
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      # Below step will not work for Terraform Cloud
      # - name: 'Set the Azure variable values for Terraform'
      #   id: vars
      #   run: |
      #     echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> "$GITHUB_ENV"
      #     echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUB_ID }}" >> "$GITHUB_ENV"
      #     echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> "$GITHUB_ENV"
      #     echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> "$GITHUB_ENV"

      # - name: 'Display global variables GITHUB_ENV'
      #   run: |
      #       env

      # Azure credentials could be pass to TF via auto.vars or as step (plan and apply) in env:
      # variables need to be defined in variables block and need to be refere in provider block
      # All secrets are stored in Github Action Secrets
      - name: 'Terraform cloud variables'
        working-directory: ${{ env.TF_DIR }}
        id: vars
        run: |
          cat > workflow.auto.tfvars <<EOF
          env_prefix = "${{ env.TF_DEV_ENV }}"
          resource_prefix = "${{ env.TF_DEV_RESOURCE }}"
          # ARM_TENANT_ID = "${{ secrets.AZURE_TENANT_ID }}"
          # ARM_SUBSCRIPTION_ID = "${{ secrets.AZURE_SUB_ID }}"
          # ARM_CLIENT_ID = "${{ secrets.AZURE_CLIENT_ID }}"
          # ARM_CLIENT_SECRET = "${{ secrets.AZURE_CLIENT_SECRET }}"
          EOF

      # Install Terraform, provide credentials to the cloud
      # Terraform API driven workflow
      - name: 'Terraform initial setup'
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.7.2

      # Format terraform configuration files into a canonical format and style
      - name: 'Terraform Format'
        working-directory: ${{ env.TF_DIR }}
        id: fmt
        run: terraform fmt
 
      # Initializes a working directory containing Terraform configuration files
      - name: 'Terraform Init'
        working-directory: ${{ env.TF_DIR }}
        id: init
        run: terraform init
       
      # Validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, etc.
      - name: 'Terraform Validate'
        working-directory: ${{ env.TF_DIR }}
        id: validate
        # -no-color -> Disables terminal formatting sequences in the output
        run: terraform validate -no-color

      # Creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure
      - name: 'Terraform Plan'
        working-directory: ${{ env.TF_DIR }}
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        env:
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUB_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

 
      # Executes the actions proposed in a Terraform plan
      - name: 'Terraform Apply'
        working-directory: ${{ env.TF_DIR }}
        # -auto-approve -> instruct Terraform to apply the plan without asking for confirmation
        # -input=false -> Disables Terraform's default behavior of prompting for input
        run: terraform apply -auto-approve -input=false
        env:
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUB_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

  build-and-deploy:
    name: 'Build and deploy'
    needs: terraform
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNC_APP_PATH}}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd

    - name: 'Azure Cloud access'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNC_APP_NAME }}
        package: ${{ env.AZURE_FUNC_APP_PATH }}
        # SCM based deployment (below) doesn't work
        # publish-profile: ${{ secrets.AZURE_FUNC_APP_PUBLISH_PROFILE }}
        # scm-do-build-during-deployment: true
        # enable-oryx-build: true

    # - name: 'Azure Cloud access'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Azure CLI script
    #   uses: azure/CLI@v1
    #   with:
    #     azcliversion: 2.30.0
    #     inlineScript: |
    #         az account show

# TODO:
# - FIX Azure SCM based deployment
# - deploy test related job
# - ADD ENV TAG per deployment
# - SELF-HOSTED RUNNER:
#   - Add python and dependencies as TASK
#   - CLI or pre-defined workflows (check action github marketplace)
#     - deploy on-prem Function?

# A common pattern is to have one workflow with separate jobs to build/test, and then deploy. You can put a condition on the deploy job (e.g. "run only on tags").
# If build is ok, move to test, if test is ok, move to deploy: Azure/GCP