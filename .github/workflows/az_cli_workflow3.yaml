name: TF_Azure_Functions

on:
  push:
    branches:
      - 'main'
      - 'dev'

env:
  TF_DIR: 'tf_azure'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      # Currently the only working method of passing variables to Terraform backend
      - name: 'Terraform cloud variables'
        working-directory: ${{ env.TF_DIR }}
        id: vars
        run: |-
          cat > workflow.auto.tfvars <<EOF
          ARM_TENANT_ID = "${{ secrets.AZURE_TENANT_ID }}"
          ARM_SUBSCRIPTION_ID = "${{ secrets.AZURE_SUB_ID }}"
          ARM_CLIENT_ID = "${{ secrets.AZURE_CLIENT_ID }}"
          ARM_CLIENT_SECRET = "${{ secrets.AZURE_CLIENT_SECRET }}"
          EOF

      # Install terraform, eventually provide credentials to the cloud 
      - name: 'Terraform initial setup'
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.7.0

      # Format terraform configuration files into a canonical format and style
      - name: 'Terraform Format'
        working-directory: ${{ env.TF_DIR }}
        id: fmt
        run: terraform fmt
 
      - name: 'Terraform Init'
        working-directory: ${{ env.TF_DIR }}
        id: init
        run: terraform init
       
      #   Validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, etc.
      - name: 'Terraform Validate'
        working-directory: ${{ env.TF_DIR }}
        id: validate
        # -no-color -> Disables terminal formatting sequences in the output
        run: terraform validate -no-color

      - name: 'Terraform Plan'
        working-directory: ${{ env.TF_DIR }}
        id: plan
        # -no-color -> Disables terminal formatting sequences in the output
        run: terraform plan -no-color
        continue-on-error: true
 
      - name: 'Terraform Apply'
        working-directory: ${{ env.TF_DIR }}
        # -auto-approve -> instruct Terraform to apply the plan without asking for confirmation
        # -input=false -> Disables Terraform's default behavior of prompting for input
        run: terraform apply -auto-approve -input=false

  build-and-deploy:
    name: 'Build and deploy'
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Azure Cloud access'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
            az account show

# TODO:
# - CHECK how TF could authenticate to AZURE?! -> move credentials from workflow to tf providers file
# - Compare CORP TF files with this repo
# - SELF-HOSTED RUNNER:
#   - CLI or pre-defined workflows (check action github marketplace)
#     - deploy on-prem Function?

# A common pattern is to have one workflow with separate jobs to build/test, and then deploy. You can put a condition on the deploy job (e.g. "run only on tags").

# If build is ok, move to test, if test is ok, move to deploy: Azure/GCP